@startuml
!theme vibrant
title Процес видалення обраних гілок (з архівацією та фільтрацією)

actor Користувач as User
participant "MainController" as Controller
participant "RegexpFilterPanelController" as RegexpFilter
participant "DateFilterPanelController" as DateFilter
participant "DialogHelper" as Helper
participant "DeleteConfirmationController" as Dialog
participant "UIStateModel" as Model
participant "GitLabService" as Service
participant "JavaFX UI" as UI

autonumber "<b>[0]"

box "I. Підготовка та вибір" #LightCyan
    User -> UI: Обирає проєкт та цільову гілку
    Controller -> Service: Завантажує та аналізує гілки
    Controller -> Model: Оновлює currentProjectBranches
    Controller -> RegexpFilter: **setTargetList(список_гілок)**
    Controller -> DateFilter: **setBranches(список_гілок)**

    alt Фільтрація за регулярним виразом
        User -> RegexpFilter: Вводить маску (напр., "archive/.*")
        User -> RegexpFilter: Натискає "+" або "-"
        RegexpFilter -> Model: **Масово змінює .setSelected() для гілок**
    else Фільтрація за датою
        User -> DateFilter: Вводить дати "Після" та/або "До"
        User -> DateFilter: Натискає "+" або "-"
        DateFilter -> Model: **Масово змінює .setSelected() для гілок за датою**
    end

    User -> UI: Вручну коригує вибір у TableView
end box

box "II. Підтвердження та операція" #LightGoldenRodYellow
    User -> Controller: Натискає "Видалити вибрані"
    Controller -> Model: Фільтрує список за `isSelected == true`
    Controller -> Helper: showDeleteConfirmationDialog(список, "Видалення обраних гілок", projectName)
    Helper -> Dialog: Створює діалог з **копією** списку
    Dialog -> RegexpFilter: **setTargetList(копія_списку)**
    Dialog -> DateFilter: **setTargetList(копія_списку)**

    User -> Dialog: **Додатково фільтрує список у діалозі**
    User -> Dialog: **Встановлює ☐ Архівувати або ☑ Архівувати**
    User -> Dialog: Натискає "Видалити" або "Архівувати"
    Dialog --> Controller: Повертає OperationConfirmationResult (з прапорцем `archive`)

    Controller -> Controller: Запускає **executeBranchOperation()**
    note right: UI блокується через `isBusy`
    loop для кожної гілки з підтвердженого списку
        alt якщо archive == false
            Controller -> Service: **deleteBranch(id, projectName, branch.getName(), branch.getLastCommitSha())**
            Service -> GitLab: **DELETE API request**
            Controller -> Model: Додає гілку до списку `successfullyDeleted`
        else
            Controller -> Service: **archiveBranch(id, projectName, branch.getName(), prefix, branch.getLastCommitSha())**
            Service -> GitLab: **POST (Create) + DELETE API requests**
            Controller -> Model: Додає гілку до списку `successfullyArchived`
        end
        note right
            Покращена обробка помилок:
            Детальне логування помилок з SHA коміту
            для покращення відстежуваності та
            чітка ідентифікація причин збоїв.
        end note
    end
end box

box "III. Елегантне оновлення UI" #LightGreen
    Controller -> Model: **successfullyArchived.forEach(b -> b.setName(...))**
    Controller -> Model: **uiStateModel.getCurrentProjectBranches().removeAll(successfullyDeleted)**
    note right
        **Ефект:**
        Замість повного перезавантаження,
        видаляються лише потрібні елементи з моделі.
        Вибір цільової гілки та позначки '✔' **зберігаються**.
    end note

    Model -> UI: ObservableList автоматично оновлює TableView
    Controller -> Controller: **repopulateTargetBranchComboBox()**

    Controller -> UI: Додаток готовий до подальшої роботи
end box

@enduml
