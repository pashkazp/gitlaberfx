@startuml
!theme vibrant
title Процес видалення/архівації старих незмерджених гілок

actor Користувач as User
participant "MainController" as Controller
participant "DialogHelper" as Helper
participant "DatePickerController" as DatePicker
participant "DeleteConfirmationController" as Dialog
participant "RegexpFilterPanelController" as RegexpFilter
participant "DateFilterPanelController" as DateFilter
participant "UIStateModel" as Model
participant "GitLabService" as Service
participant "JavaFX UI" as UI

autonumber "<b>[0]"

box "I. Підготовка" #LightCyan
    User -> UI: Обирає проєкт та цільову гілку
    Controller -> Controller: Запускається rescanMerged()
    note right: UI показує позначки '✔' для змерджених гілок
end box

box "II. Ініціація та підтвердження" #LightGoldenRodYellow
    User -> Controller: Натискає "Видалити не змерджені"
    Controller -> Helper: Відкриває діалог вибору дати
    Helper -> DatePicker: Створює та налаштовує діалог
    DatePicker --> User: Показує діалог з календарем
    User -> DatePicker: Обирає дату
    User -> DatePicker: Натискає "OK"
    DatePicker --> Helper: Повертає LocalDate
    Helper --> Controller: Повертає обрану дату

    Controller -> Model: **Фільтрує гілки за датою та статусом `isMergedIntoTarget`**
    note right
        Умови фільтрації:
        1. `branch.isMergedIntoTarget() == false`
        2. `branch.isProtected() == false`
        3. `!branch.getName().equals(targetBranch)`
        4. Дата останнього коміту < обраної дати
    end note

    Controller -> Helper: showDeleteConfirmationDialog(відфільтрований_список, "Видалення незмерджених гілок", projectName)
    Helper -> Dialog: Створює діалог з **копією** списку
    Dialog -> RegexpFilter: **setTargetList(копія_списку)**
    Dialog -> DateFilter: **setTargetList(копія_списку)**

    User -> Dialog: **Додатково фільтрує список у діалозі**
    User -> Dialog: **Встановлює ☐ Архівувати або ☑ Архівувати**
    User -> Dialog: Натискає "Видалити" або "Архівувати"
    Dialog --> Controller: Повертає OperationConfirmationResult (з прапорцем `archive`)

    Controller -> Controller: Запускає **executeBranchOperation()**
    loop для кожної гілки з підтвердженого списку
        alt якщо archive == false
            Controller -> Service: **deleteBranch(id, branch.getName())**
            Service -> GitLab: **DELETE API request**
            Controller -> Model: Додає гілку до списку `successfullyDeleted`
        else
            Controller -> Service: **archiveBranch(id, branch.getName(), prefix)**
            Service -> GitLab: **POST (Create) + DELETE API requests**
            Controller -> Model: Додає гілку до списку `successfullyArchived`
        end
        note right
            Покращена обробка помилок:
            Детальне логування помилок
            та чітка ідентифікація причин збоїв.
        end note
    end
end box

box "III. Елегантне оновлення UI" #LightGreen
    Controller -> Model: **successfullyArchived.forEach(b -> b.setName(...))**
    Controller -> Model: **uiStateModel.getCurrentProjectBranches().removeAll(successfullyDeleted)**
    note right
        **Ефект:**
        Замість повного перезавантаження,
        видаляються лише потрібні елементи з моделі.
        Вибір цільової гілки та позначки '✔' **зберігаються**.
    end note

    Model -> UI: ObservableList автоматично оновлює TableView
    Controller -> Controller: **repopulateTargetBranchComboBox()**

    Controller -> UI: Додаток готовий до подальшої роботи
end box

@enduml
