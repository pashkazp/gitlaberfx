@startuml
!theme vibrant
title Процес видалення змерджених гілок

actor Користувач as User
participant "MainController" as Controller
participant "UIStateModel" as Model
participant "GitLabService" as Service
participant "JavaFX UI" as UI

autonumber "<b>[0]"

box "I. Підготовка" #LightCyan
    User -> UI: Обирає проєкт та цільову гілку
    Controller -> Model: Стан UI оновлюється
    Controller -> Controller: Запускається rescanMerged()
    note right: UI показує позначки '✔' для змерджених гілок
end box

box "II. Ініціація видалення" #LightGoldenRodYellow
    User -> Controller: Натискає "Видалити змерджені"
    Controller -> UI: Відкриває діалог вибору дати
    UI -> User: Обирає дату
    User -> Controller: Повертає дату

    Controller -> Model: **Фільтрує список currentProjectBranches**
    note right
        Умови фільтрації:
        1. `branch.isMergedIntoTarget() == true`
        2. `branch.getLastCommit()` < обраної дати
    end note

    Controller -> UI: Показує діалог підтвердження зі списком відфільтрованих гілок
    UI -> User: Підтверджує видалення
    User -> Controller: Повертає фінальний список

    Controller -> Controller: Запускає executeBranchDeletion()
    loop для кожної гілки з підтвердженого списку
        Controller -> Service: deleteBranch(id, branchName)
        Service -> GitLab: **DELETE API request**
        Controller -> Model: Збирає список успішно видалених
    end
end box

box "III. Елегантне оновлення UI" #LightGreen
    Controller -> Model: **uiStateModel.getCurrentProjectBranches().removeAll(successfullyDeleted)**
    note right
        **Ефект:**
        Таблиця оновлюється, видаляючи лише потрібні рядки.
        Вибір цільової гілки та позначки '✔' на інших гілках
        **залишаються незмінними**.
    end note

    Model -> UI: ObservableList автоматично оновлює TableView
    Controller -> UI: Додаток готовий до подальшої роботи
end box

@enduml