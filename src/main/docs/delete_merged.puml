@startuml
!theme vibrant
title Процес видалення змерджених гілок (з архівацією та фільтрацією)

actor Користувач as User
participant "MainController" as Controller
participant "DialogHelper" as Helper
participant "DateSelectorController" as DateSelector
participant "DeleteConfirmationController" as Dialog
participant "UIStateModel" as Model
participant "GitLabService" as Service
participant "JavaFX UI" as UI

autonumber "<b>[0]"

box "I. Підготовка" #LightCyan
    User -> UI: Обирає проєкт та цільову гілку
    Controller -> Controller: Запускається rescanMerged()
    note right: UI показує позначки '✔' для змерджених гілок
end box

box "II. Ініціація та підтвердження" #LightGoldenRodYellow
    User -> Controller: Натискає "Видалити змерджені"
    Controller -> Helper: Відкриває діалог вибору дати
    Helper -> DateSelector: Створює та налаштовує діалог
    DateSelector --> User: Показує діалог з полями "Після" та "До"
    User -> DateSelector: Обирає дату або діапазон дат
    User -> DateSelector: Натискає "OK"
    DateSelector --> Helper: Повертає DateSelectorResult
    Helper --> Controller: Повертає обрану дату або діапазон

    Controller -> Model: **Фільтрує гілки за датою та статусом `isMergedIntoTarget`**
    note right
        Умови фільтрації:
        1. `branch.isMergedIntoTarget() == true`
        2. Якщо вказано "Після": `branch.getLastCommit()` >= обраної дати
        3. Якщо вказано "До": `branch.getLastCommit()` <= обраної дати
    end note

    Controller -> Helper: showDeleteConfirmationDialog(відфільтрований_список)
    Helper -> Dialog: Створює діалог з **копією** списку

    User -> Dialog: **Знімає вибір з деяких гілок або використовує фільтр**
    User -> Dialog: **Залишає ☐ Архівувати** (виконуємо видалення)
    User -> Dialog: Натискає "Видалити"
    Dialog --> Controller: Повертає OperationConfirmationResult (з прапорцем `archive=false`)

    Controller -> Controller: Запускає **executeBranchOperation()**
    loop для кожної гілки з підтвердженого списку
        Controller -> Service: **deleteBranch(id, branch.getName())**
        Service -> GitLab: **DELETE API request**
        note right
            Покращена обробка помилок:
            Детальне логування помилок
            та чітка ідентифікація причин збоїв.
        end note
        Controller -> Model: Збирає список успішно видалених гілок
    end
end box

box "III. Елегантне оновлення UI" #LightGreen
    Controller -> Model: **uiStateModel.getCurrentProjectBranches().removeAll(successfullyDeleted)**
    note right
        **Ефект:**
        Замість повного перезавантаження,
        видаляються лише потрібні елементи з моделі.
        Вибір цільової гілки та позначки '✔' **зберігаються**.
    end note

    Model -> UI: ObservableList автоматично оновлює TableView
    Controller -> Controller: **repopulateTargetBranchComboBox()**

    Controller -> UI: Додаток готовий до подальшої роботи
end box

@enduml
